I will add encryption and digital signatures to peerster.

Upon start-up, peerster will generate a 1024-bit RSA key pair.

Normal rumor messages will have the following format:
-"Message" which contains a QVariantMap containing all the old fields for the
  rumor message.
-"Sig" which contains a signature for the contents of "Message".
-"PubKey" which contains a QByteArray of the sender's public key.
 Although broadcasting the public key early and often through every rumor
 message decreases the risk since there will presumably be multiple routes,
 this scheme is vulnerable to man in the middle attacks; this will be addressed
 later in this proposal.
-"PubKeySigners" which contains a QList of the origin names that trust me.
 Others will be able to request the actual signatures from me with a new type of
 point-to-point message described later.

Point-to-point messages will have the following format:
-"HopLimit" which is outside of the signature, since it needs to be modified by
 middlemen.
-"Message" which is a QVariantMap containing the following fields:
      -"Dest" as before
      -"Origin" as before
      -"CryptKey" which is a QByteArray containing an ephemeral AES256 key
       encrypted by the recipient's public key
      -"CryptData" which is a QVariantMap containing the remaining fields of the
       point-to-point message, encrypted by the AES256 key in the CryptKey field
-"Sig" which is a signature for "Message".

Key exchange with only rumor messages is vulnerable to man in the middle
attacks, so the following scheme will be added to authenticate pairings between
public keys and origin names.
-Alice wants to authenticate Bob because she knows him outside of peerster.
-Alice sends Bob a point-to-point message with the field "Challenge" containing
 a QString that challenges Bob with a question. For example
 "Where did we first meet?" or some other question that only Bob can answer.
-Bob creates an answer to this question (maximum 32 characters) and uses it as
 an AES256 key, padding it with spaces. Bob then encrypts his public key with
 this AES256 key.
-Bob sends Alice a point-to-point message with the field "CryptPubKey" which is
 a QByteArray of his encrypted public key.
-Alice decrypts Bob's public key, since she knew the answer to her challenge to
 Bob. If Bob's decrypted public key matches what she has on record for Bob, then
 Alice trusts that Bob's public key is authentic.
-Alice signs Bob's public key and sends the signature back to Bob in a
 point-to-point message with the field "PubKeySig"

Bob will now include Alice's origin name in his "PubKeySigners" field in future
messages.

Whenever Charlie receives a public key from a non-trusted individual, he checks
"PubKeySigners" to see if he trusts any of the signers. If he does, he'll send
a point-to-point message to the owner of the public key asking for the signature
of the trusted third party.
For example, suppose Charlie trusts Alice and just received a message from Bob
with Alice's name included in the "PubKeySigners" field. Charlie sends Bob a
message with the field "SigRequest" containing Alice's origin as a QString. Bob
then sends Charlie a point-to-point message with Alice's name in a field
"Signer" and Alice's signature in a field "SigResponse".
Charlie then verifies Alice's signature and trusts Bob by signing his public
key and sending the signature as Alice did previously.

This notion of trusted versus non-trusted public keys will be shown in the UI.
A graphical distinction will be made between completely unsigned messages,
messages signed by a non-trusted public key (and thus potentially the result of
a man-in-the-middle attack), and messages signed by a trusted public key.

